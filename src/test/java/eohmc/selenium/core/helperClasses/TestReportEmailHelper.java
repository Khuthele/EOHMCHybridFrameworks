package eohmc.selenium.core.helperClasses;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class TestReportEmailHelper extends BaseClassHelper
{
    static String reportPath = BaseClassHelper.htmlReporter.config().getFilePath();
	static String imagePath = BaseClassHelper.strFileLocation.getAbsolutePath();
    static String toEmail = "khuthele.manakaza@eoh.com,0824855512@vodamail.co.za";
	static String fromEmail = "khuthelemanakaza@gmail.com";
    static String passWord = "aaaaaaaa";
    static String port = "465";
    static String host = "smtp.gmail.com";
    static String socketFactoryClass = "javax.net.ssl.SSLSocketFactory";
    static String[] to = {toEmail};
	static Session session;
	
	public static void emailReport()
    {
        //Create object of Property file
        Properties props = new Properties();

        //Set the host smtp address, port, socketFactory and authorization
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.port", port);
        props.put("mail.smtp.socketFactory.class",socketFactoryClass);
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.user", fromEmail);

		try
		{
			//This session object handles the authentication
			 session = Session.getDefaultInstance(props, new javax.mail.Authenticator()
			 {
			 @Override
			 public PasswordAuthentication getPasswordAuthentication()
		     {
			   return new PasswordAuthentication(fromEmail, passWord);
		     }});
		}
		catch(Exception ex)
		{
			System.out.println("[ERROR] - Session Authenticator Exception: " + ex.getMessage());
		}
		
        try
        {
            //Create object of MimeMessage class
            Message message = new MimeMessage(session);
  
			//Set the from address
            message.setFrom(new InternetAddress(fromEmail));
	    
			String[] recipientList = toEmail.split(",");
			InternetAddress[] recipientAddress = new InternetAddress[recipientList.length];
			int counter = 0;
			for (String recipient : recipientList)
			{
				recipientAddress[counter] = new InternetAddress(recipient.trim());
				counter++;
			}
			message.setRecipients(Message.RecipientType.TO, recipientAddress);

//            //Set the recipient addresses
//            for(int i=0;i<to.length;i++)//Loop through array of TO emails
//            {
//                message.addRecipients(Message.RecipientType.TO, new InternetAddress(to[i]));
//            }

//            for(int i=0;i<cc.length;i++)//Loop through array of CC emails
//            {
//                message.addRecipient(Message.RecipientType.CC, new
//                InternetAddress(cc[i]));
//            }
			
            //Set the email Subject
            message.setSubject("Test Execution Report_"  + strDate + " - On QA Environment");

            //Create object to add email content
            BodyPart messageBodyAddEmailText = new MimeBodyPart();//actual message body content
            MimeBodyPart messageBodyAddHtmlReport = new MimeBodyPart();//add report to email

            //Set the body of email
            messageBodyAddEmailText.setText("Good Day, \n\nThis is a test email generated by the Test Execution Report.\n\nPlease find attached report. \n\nRegards \nSQA Team");

            //Create data source and pass the filename to send
            DataSource source = new FileDataSource(reportPath);
			DataSource sourceImage = new FileDataSource(imagePath);

            //Set the handler
		    messageBodyAddHtmlReport.setDataHandler(new DataHandler(sourceImage));
            messageBodyAddHtmlReport.setDataHandler(new DataHandler(source));

            //Set the filename for the email
            messageBodyAddHtmlReport.setFileName("Test Execution Automation Report _"+ strDate +".html");

            //Add message parts using object of MimeMultipart class
            Multipart multipart = new MimeMultipart();
			
			//add report part
            multipart.addBodyPart(messageBodyAddHtmlReport);
			
			//add actual message body
            multipart.addBodyPart(messageBodyAddEmailText);
			
			//Set the email content
            message.setContent(multipart);

            System.out.println("=====Sending report to email======");

            //Send the email
            Transport.send(message);

            System.out.println("==========Email Sent=========");
        }
        catch (MessagingException e)
        {
            System.out.println("[ERROR] - Transport Exception: " + e.getMessage());
        }
    }
}